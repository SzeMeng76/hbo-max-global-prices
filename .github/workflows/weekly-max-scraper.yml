name: Weekly HBO Max Price Scraper

on:
  schedule:
    # 每周日 UTC 时间 2:00 执行（北京时间周日 10:00）
    - cron: '0 2 * * 0'
  workflow_dispatch: # 允许手动触发

# 添加写入权限以允许推送到仓库
permissions:
  contents: write
  actions: read
  id-token: write

env:
  TZ: Asia/Shanghai

jobs:
  scrape-and-update:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create output directory
      run: mkdir -p output
        
    - name: Run HBO Max scraper
      id: scraper
      env:
        PROXY_API_TEMPLATE: ${{ secrets.PROXY_API_TEMPLATE }}
      run: |
        echo "开始抓取HBO Max价格数据..."
        echo "当前时间: $(date +'%Y-%m-%d %H:%M:%S %Z')"
        python max_scraper.py
        echo "scraper_status=success" >> $GITHUB_OUTPUT
      continue-on-error: true
        
    - name: Check scraper output
      run: |
        if [ -f "max_prices_all_countries.json" ]; then
          echo "✅ 爬虫数据文件生成成功"
          ls -la max_prices_all_countries*.json
          file_size=$(du -h max_prices_all_countries.json | cut -f1)
          echo "📁 数据文件大小: $file_size"
        else
          echo "❌ 爬虫数据文件未生成"
          exit 1
        fi
        
    - name: Run rate converter
      id: converter
      env:
        API_KEY: ${{ secrets.EXCHANGE_API_KEY }}
      run: |
        echo "开始汇率转换..."
        python max_rate_converter.py
        echo "converter_status=success" >> $GITHUB_OUTPUT
      continue-on-error: true
        
    - name: Check converter output
      run: |
        if [ -f "max_prices_cny_sorted.json" ]; then
          echo "✅ 汇率转换文件生成成功"
          ls -la max_prices_cny_sorted.json
          file_size=$(du -h max_prices_cny_sorted.json | cut -f1)
          echo "📁 转换后文件大小: $file_size"
        else
          echo "❌ 汇率转换文件未生成"
          exit 1
        fi
        
    - name: Check for changes
      id: check_changes
      run: |
        git diff --name-only
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "检测到文件变化"
          git status --porcelain
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "没有文件变化"
        fi
        
    - name: Display summary
      run: |
        echo "=== HBO Max 价格抓取执行摘要 ==="
        echo "执行时间: $(date +'%Y-%m-%d %H:%M:%S %Z')"
        echo "抓取状态: ${{ steps.scraper.outputs.scraper_status || '失败' }}"
        echo "转换状态: ${{ steps.converter.outputs.converter_status || '失败' }}"
        echo "文件变化: ${{ steps.check_changes.outputs.changes || '否' }}"
        
        if [ -f "max_prices_cny_sorted.json" ]; then
          echo "输出文件大小: $(du -h max_prices_cny_sorted.json | cut -f1)"
        fi
        
    - name: Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add *.json
        git add archive/
        git commit -m "Weekly update: HBO Max prices - $(date +'%Y-%m-%d %H:%M:%S %Z')"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
        echo "✅ 数据已提交到仓库"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: hbo-max-price-data-${{ github.run_number }}
        path: |
          max_prices_all_countries*.json
          max_prices_cny_sorted.json
          archive/
        retention-days: 30
        
    - name: Job summary
      if: always()
      run: |
        echo "## 🎬 HBO Max 价格抓取执行报告" >> $GITHUB_STEP_SUMMARY
        echo "**执行时间:** $(date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_STEP_SUMMARY
        echo "**抓取状态:** ${{ steps.scraper.outputs.scraper_status || '❌ 失败' }}" >> $GITHUB_STEP_SUMMARY
        echo "**转换状态:** ${{ steps.converter.outputs.converter_status || '❌ 失败' }}" >> $GITHUB_STEP_SUMMARY
        echo "**文件变化:** ${{ steps.check_changes.outputs.changes || '❌ 否' }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "max_prices_cny_sorted.json" ]; then
          echo "**输出文件大小:** $(du -h max_prices_cny_sorted.json | cut -f1)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*自动生成时间: $(date +'%Y-%m-%d %H:%M:%S %Z')*" >> $GITHUB_STEP_SUMMARY