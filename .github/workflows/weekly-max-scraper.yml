name: Quarterly HBO Max Price Scraper

on:
  schedule:
    # 每季度首月1号 UTC 时间 2:00 执行（1月、4月、7月、10月）
    - cron: '0 2 1 1,4,7,10 *'
  workflow_dispatch: # 允许手动触发

# 添加写入权限以允许推送到仓库
permissions:
  contents: write
  actions: read
  id-token: write

env:
  TZ: Asia/Shanghai

jobs:
  scrape-and-update:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create output directory
      run: mkdir -p output
        
    - name: Run HBO Max scraper
      id: scraper
      env:
        PROXY_API_TEMPLATE: ${{ secrets.PROXY_API_TEMPLATE }}
      run: |
        echo "开始抓取HBO Max价格数据..."
        echo "当前时间: $(date +'%Y-%m-%d %H:%M:%S %Z')"
        python max_scraper.py
        echo "scraper_status=success" >> $GITHUB_OUTPUT
      continue-on-error: true
        
    - name: Check scraper output
      run: |
        if [ -f "max_prices_all_countries.json" ]; then
          echo "✅ 爬虫数据文件生成成功"
          ls -la max_prices_all_countries*.json
          file_size=$(du -h max_prices_all_countries.json | cut -f1)
          echo "📁 数据文件大小: $file_size"
        else
          echo "❌ 爬虫数据文件未生成"
          exit 1
        fi
        
    - name: Run rate converter
      id: converter
      env:
        API_KEY: ${{ secrets.EXCHANGE_API_KEY }}
      run: |
        echo "开始汇率转换..."
        python max_rate_converter.py
        echo "converter_status=success" >> $GITHUB_OUTPUT
      continue-on-error: true
        
    - name: Check converter output
      run: |
        if [ -f "max_prices_cny_sorted.json" ]; then
          echo "✅ 汇率转换文件生成成功"
          ls -la max_prices_cny_sorted.json
          file_size=$(du -h max_prices_cny_sorted.json | cut -f1)
          echo "📁 转换后文件大小: $file_size"
        else
          echo "❌ 汇率转换文件未生成"
          exit 1
        fi
        
    - name: Check for changes
      id: check_changes
      run: |
        git diff --name-only
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "检测到文件变化"
          git status --porcelain
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "没有文件变化"
        fi
        
    - name: Display summary
      run: |
        echo "=== HBO Max 价格抓取执行摘要 ==="
        echo "执行时间: $(date +'%Y-%m-%d %H:%M:%S %Z')"
        echo "抓取状态: ${{ steps.scraper.outputs.scraper_status || '失败' }}"
        echo "转换状态: ${{ steps.converter.outputs.converter_status || '失败' }}"
        echo "文件变化: ${{ steps.check_changes.outputs.changes || '否' }}"
        
        if [ -f "max_prices_cny_sorted.json" ]; then
          echo "输出文件大小: $(du -h max_prices_cny_sorted.json | cut -f1)"
        fi
        
    - name: Archive data with timestamp
      if: steps.scraper.outputs.scraper_status == 'success' && steps.converter.outputs.converter_status == 'success'
      run: |
        TIMESTAMP=$(date +'%Y%m%d_%H%M%S')
        YEAR=$(date +'%Y')
        ARCHIVE_DIR="archive/${YEAR}"
        mkdir -p ${ARCHIVE_DIR}
        echo "开始归档数据到 ${ARCHIVE_DIR}..."
        if [ -f "max_prices_all_countries.json" ]; then
          cp max_prices_all_countries.json "${ARCHIVE_DIR}/max_prices_all_countries_${TIMESTAMP}.json"
          echo "✅ 已归档原始价格数据"
        fi
        if [ -f "max_prices_cny_sorted.json" ]; then
          cp max_prices_cny_sorted.json "${ARCHIVE_DIR}/max_prices_cny_sorted_${TIMESTAMP}.json"
          echo "✅ 已归档转换后价格数据"
        fi
        echo "归档完成，文件保存在: ${ARCHIVE_DIR}"
        
    - name: Detect price changes and generate changelog
      id: price_changes
      if: steps.scraper.outputs.scraper_status == 'success' && steps.converter.outputs.converter_status == 'success'
      run: |
        echo "🔍 开始检测HBO Max价格变化..."
        python max_price_change_detector.py
        
        # 检查脚本执行结果并设置默认值
        if [ ! -f "$GITHUB_OUTPUT" ] || ! grep -q "changes_count=" "$GITHUB_OUTPUT" 2>/dev/null; then
          echo "changes_count=0" >> $GITHUB_OUTPUT
          echo "summary_file=" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
        
    - name: Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # 分别添加存在的文件，避免 git add 失败
        git add . || echo "Adding all changes"
        
        # 构建提交信息
        COMMIT_MSG="Quarterly update: HBO Max prices and archive data - $(date +'%Y-%m-%d %H:%M:%S %Z')"
        if [ "${{ steps.price_changes.outputs.changes_count }}" != "0" ] && [ "${{ steps.price_changes.outputs.changes_count }}" != "" ]; then
          COMMIT_MSG="${COMMIT_MSG} [发现 ${{ steps.price_changes.outputs.changes_count }} 项价格变化]"
        fi
        
        # 检查是否有 CHANGELOG 归档
        if [ -d "changelog_archive" ] && [ -n "$(find changelog_archive -name "*.md" -type f 2>/dev/null)" ]; then
          # 计算上个季度
          CURRENT_YEAR=$(date +'%Y')
          CURRENT_MONTH=$(date +'%m')
          if [ "$CURRENT_MONTH" = "01" ]; then
            LAST_QUARTER_YEAR=$((CURRENT_YEAR - 1))
            LAST_QUARTER="Q4"
            LAST_QUARTER_STR="${LAST_QUARTER_YEAR}-Q4"
          elif [ "$CURRENT_MONTH" = "04" ]; then
            LAST_QUARTER_STR="${CURRENT_YEAR}-Q1"
          elif [ "$CURRENT_MONTH" = "07" ]; then
            LAST_QUARTER_STR="${CURRENT_YEAR}-Q2"
          elif [ "$CURRENT_MONTH" = "10" ]; then
            LAST_QUARTER_STR="${CURRENT_YEAR}-Q3"
          fi
          
          ARCHIVED_COUNT=$(find changelog_archive -name "changelog_${LAST_QUARTER_STR}*.md" -type f 2>/dev/null | wc -l)
          if [ "$ARCHIVED_COUNT" -gt 0 ]; then
            COMMIT_MSG="${COMMIT_MSG} [归档CHANGELOG]"
          fi
        fi
        
        git commit -m "${COMMIT_MSG}"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
        echo "✅ 数据已提交到仓库"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: hbo-max-price-data-${{ github.run_number }}
        path: |
          max_prices_all_countries*.json
          max_prices_cny_sorted.json
          CHANGELOG.md
          changelog_archive/
          max_price_changes_summary_*.json
          archive/
        retention-days: 30
        
    - name: Job summary
      if: always()
      run: |
        echo "## 🎬 HBO Max 价格抓取执行报告" >> $GITHUB_STEP_SUMMARY
        echo "**执行时间:** $(date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_STEP_SUMMARY
        echo "**抓取状态:** ${{ steps.scraper.outputs.scraper_status || '❌ 失败' }}" >> $GITHUB_STEP_SUMMARY
        echo "**转换状态:** ${{ steps.converter.outputs.converter_status || '❌ 失败' }}" >> $GITHUB_STEP_SUMMARY
        echo "**文件变化:** ${{ steps.check_changes.outputs.changes || '❌ 否' }}" >> $GITHUB_STEP_SUMMARY
        
        # 价格变化信息
        CHANGES_COUNT="${{ steps.price_changes.outputs.changes_count }}"
        if [ "$CHANGES_COUNT" != "" ] && [ "$CHANGES_COUNT" != "0" ]; then
          echo "**价格变化:** 🔄 发现 $CHANGES_COUNT 项变化" >> $GITHUB_STEP_SUMMARY
        elif [ "$CHANGES_COUNT" = "0" ]; then
          echo "**价格变化:** ✅ 无变化" >> $GITHUB_STEP_SUMMARY
        else
          echo "**价格变化:** ⚠️ 检测失败" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "max_prices_cny_sorted.json" ]; then
          echo "**输出文件大小:** $(du -h max_prices_cny_sorted.json | cut -f1)" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 显示归档信息
        YEAR=$(date +'%Y')
        ARCHIVE_DIR="archive/${YEAR}"
        if [ -d "${ARCHIVE_DIR}" ] && [ -n "$(ls -A ${ARCHIVE_DIR} 2>/dev/null)" ]; then
          echo "**归档状态:** ✅ 已归档到 ${ARCHIVE_DIR}" >> $GITHUB_STEP_SUMMARY
          echo "**归档文件数量:** $(ls ${ARCHIVE_DIR}/*$(date +'%Y%m%d')* 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
        else
          echo "**归档状态:** ❌ 未归档" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 如果有价格变化，显示changelog链接
        if [ -f "CHANGELOG.md" ] && [ "$CHANGES_COUNT" != "0" ] && [ "$CHANGES_COUNT" != "" ]; then
          echo "**变化详情:** 📋 查看 [CHANGELOG.md](./CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 显示 CHANGELOG 归档信息
        if [ -d "changelog_archive" ]; then
          ARCHIVE_COUNT=$(find changelog_archive -name "*.md" -type f 2>/dev/null | wc -l)
          if [ "$ARCHIVE_COUNT" -gt 0 ]; then
            echo "**CHANGELOG归档:** 📚 共 $ARCHIVE_COUNT 个季度归档" >> $GITHUB_STEP_SUMMARY
            # 检查本次是否新增了归档（检查上个季度）
            CURRENT_YEAR=$(date +'%Y')
            CURRENT_MONTH=$(date +'%m')
            if [ "$CURRENT_MONTH" = "01" ]; then
              LAST_QUARTER_YEAR=$((CURRENT_YEAR - 1))
              LAST_QUARTER="Q4"
              LAST_QUARTER_STR="${LAST_QUARTER_YEAR}-Q4"
            elif [ "$CURRENT_MONTH" = "04" ]; then
              LAST_QUARTER_STR="${CURRENT_YEAR}-Q1"
            elif [ "$CURRENT_MONTH" = "07" ]; then
              LAST_QUARTER_STR="${CURRENT_YEAR}-Q2"
            elif [ "$CURRENT_MONTH" = "10" ]; then
              LAST_QUARTER_STR="${CURRENT_YEAR}-Q3"
            fi
            
            LAST_QUARTER_ARCHIVE=$(find changelog_archive -name "changelog_${LAST_QUARTER_STR}*.md" -type f 2>/dev/null | wc -l)
            if [ "$LAST_QUARTER_ARCHIVE" -gt 0 ]; then
              echo "**本次归档:** ✅ 已归档上季度记录" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*自动生成时间: $(date +'%Y-%m-%d %H:%M:%S %Z')*" >> $GITHUB_STEP_SUMMARY
